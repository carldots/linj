#!/usr/bin/env python3


# Fetching API Through GET Requests
import requests
# API resonds with JSON which needs to be parsed
import json
# Accessing CLI arguments
import sys 
# Conveniently managing .env
import dotenv


#  ____  _             _             
# / ___|| |_ ___  _ __(_)_ __   __ _ 
# \___ \| __/ _ \| '__| | '_ \ / _` |
#  ___) | || (_) | |  | | | | | (_| |
# |____/ \__\___/|_|  |_|_| |_|\__, |
#                              |___/ 
#   ____              _            _   _       _     
#  / ___|_ __ ___  __| | ___ _ __ | |_(_) __ _| |___ 
# | |   | '__/ _ \/ _` |/ _ \ '_ \| __| |/ _` | / __|
# | |___| | |  __/ (_| |  __/ | | | |_| | (_| | \__ \
#  \____|_|  \___|\__,_|\___|_| |_|\__|_|\__,_|_|___/
#                                                    
                                                                        

def credentials(key):
    # a+ naturally places the seek position at the end of the file for appending
    # However this also means that reading the file always returns nothing
    # You need to seek(0) in order to read the file for every append. Confused, me too
    with open(".env", "a+") as file:
        # Making sure reading happens from the top to bottom and not bottom to bottom (seriously what the hell?)
        file.seek(0)
        for line in file.readlines():
            # If given credential key is found in .env
            if line.startswith(key):
                # Return the value of that key if found
                return dotenv.get_key(".env", key)
        # If the credential is not found in .env
        print(f"No value for {key} found in .env")
        # Ask the user for that missing value and create a new key for it
        value = input(f"Please enter the value for {key}: ")
        # Append the key value pair to .env
        file.write(f'\n{key}="{value}"')
        # Get the same key from .env
        return dotenv.get_key(".env", key)



# Updating Credentials (city and API key for now)
def update_credentials(key, value):
    # Appends to .env
    dotenv.set_key(".env", key, value)
    

#  _____    _       _     _                  _    ____ ___ 
# |  ___|__| |_ ___| |__ (_)_ __   __ _     / \  |  _ \_ _|
# | |_ / _ \ __/ __| '_ \| | '_ \ / _` |   / _ \ | |_) | | 
# |  _|  __/ || (__| | | | | | | | (_| |  / ___ \|  __/| | 
# |_|  \___|\__\___|_| |_|_|_| |_|\__, | /_/   \_\_|  |___|
#                                 |___/                    


# Takes one parameter, the bus stop name and returns the stop ID needed for the other API's to work
def get_stop_id(stop_name):
    # GET (requests library) the API in a unicode text format which is json with the `.text` method (also from requests library)
    # Deserialize this json text object into a Python dictionary
    API_RESPONSE = json.loads(requests.get(f'''https://api.resrobot.se/v2.1/location.name?input={credentials("CITY")} {stop_name}&format=json&accessId={credentials("API_KEY")}''').text)
    # Trafiklab API gives errors as an API response which cannot be parsed
    # Thus we need to check every time if `errorText`, the useful part of such a response is present
    if "errorText" not in API_RESPONSE:
        if "stopLocationOrCoordLocation" in API_RESPONSE:
            stop_id = API_RESPONSE["stopLocationOrCoordLocation"][0]["StopLocation"]["extId"]
            return stop_id
        else:
            print(f'Trafiklab API response gave no stop id most likely indicating that there isn\'t any id available for "{stop_name}"')
    else:
        print(f"Trafiklab API gave a response containing only errors. The error being: {API_RESPONSE["errorText"]}")



# TrafikLab Timetable API only requires the origin stop id
def bus_timetable(origin):
    API_RESPONSE = json.loads(requests.get(f'''https://api.resrobot.se/v2.1/departureBoard?id={get_stop_id(origin)}&format=json&accessId={credentials("API_KEY")}''').text)
    if "errorText" not in API_RESPONSE:
        if "Departure" in API_RESPONSE:
            # API message always includes technical information which isn't needed
            # Being explicit about what is happening is my reasoning for this decision
            timetable = API_RESPONSE["Departure"]
            print()
            # "".join(origin).capitalize()) assumes that the user does not misspell the bus stop and uses it as the displayed bus stop (capitalized)
            print("Showing timetable for:", "".join(origin).capitalize())
            # Print all stops heading towards Resecentrum
            print()
            print("Heading towards Resecentrum")
            for stop in timetable:
                # It is useful to separate busses heading towards or away from the central station
                # This is indicated by the directionFlag for Trafiklab API
                if stop["directionFlag"] == "2":
                    # Print all busses + time heading towards the central station
                    print(stop["time"], stop["ProductAtStop"]["line"], stop["direction"])
            # Print all stops heading away from Resecentrum
            print()
            print("Showing timetable for:", "".join(origin).capitalize())
            print()
            print("Heading away from Resecentrum")
            for stop in timetable:
                # 1 indicates that the bus is heading away from the central station
                if stop["directionFlag"] == "1":
                    # Print all busses + time heading away from the central station
                    print(stop["time"], stop["ProductAtStop"]["line"], stop["direction"])
            return timetable
        else:
            print(f'Trafiklab API response gave no bus stops most likely indicating that there isn\'t any timetable available for "{origin}"')
    else:
        print(f"Trafiklab API gave a response containing only errors. The error being: {API_RESPONSE["errorText"]}")


def bus_route(origin, destination):
    API_RESPONSE = json.loads(requests.get(f'''https://api.resrobot.se/v2.1/trip?format=json&originId={get_stop_id(origin)}&destId={get_stop_id(destination)}&passlist=true&showPassingPoints=true&accessId={credentials("API_KEY")}''').text)
    if "errorText" not in API_RESPONSE:
        # Checking if the API response has any trips at all. If not, then tell the user that there probably isn't any route available for the given stop
        if "Trip" in API_RESPONSE:
            for stops in API_RESPONSE["Trip"]:
                # Printing {origin} --> {bus stop name} ({bus line})
                #FIX: Intermittent "line" does not exist and thus cannot run for loop for parsing. Need to catch it again to fix it
                print(stops["Origin"]["name"], "-->", stops["Destination"]["name"], "(" + stops["LegList"]["Leg"][0]["Product"][0]["line"] + ")")
                # Printing {departure time} --> {arrival time}
                print(stops["Origin"]["time"], "-->", stops["Destination"]["time"])
        else:
            print(f'Trafiklab API response gave no routes most likely indicating that there isn\'t arent routes available for "{origin}"')
    else:
        print(f"Trafiklab API gave a response containing only errors. The error being: {API_RESPONSE["errorText"]}")


#  ____                _                ____ _     ___ 
# |  _ \ __ _ _ __ ___(_)_ __   __ _   / ___| |   |_ _|
# | |_) / _` | '__/ __| | '_ \ / _` | | |   | |    | | 
# |  __/ (_| | |  \__ \ | | | | (_| | | |___| |___ | | 
# |_|   \__,_|_|  |___/_|_| |_|\__, |  \____|_____|___|
#                              |___/                   
#     _                                         _       
#    / \   _ __ __ _ _   _ _ __ ___   ___ _ __ | |_ ___ 
#   / _ \ | '__/ _` | | | | '_ ` _ \ / _ \ '_ \| __/ __|
#  / ___ \| | | (_| | |_| | | | | | |  __/ | | | |_\__ \
# /_/   \_\_|  \__, |\__,_|_| |_| |_|\___|_| |_|\__|___/
#              |___/                                    


# A list of all CLI arguments
POSSIBLE_TOP_LEVEL_CLI_ARGUMENTS = ["change", "채ndra", "from", "fr책n", "help", "--help"]


# Function for asking the user for a new API key and updating .env to reflect these changes
def parse_cli_for_changing_api_key():
    # Checking if any argument was provided at all, otherwise IndexError
    if len(sys.argv) >= 2: 
        # Checks if the first CLI argument (actually second, dont worry about it) is recognizable
        if sys.argv[1] == "change" or sys.argv[1] == "채ndra":
            # Check if second CLI argument is recognizable
            if sys.argv[2] == "key" or sys.argv[2] == "nyckel":
                # Initializing `value` for the while loop
                value = " "
                ask = "Please input your API key without any spaces: "
                # If the user gives a key with spaces, give a different message until the key is acceptable
                while " " in value:
                    value = input(ask)
                    if " " in value:
                        ask = "Try again without spaces: "
                update_credentials("API_KEY", value)

        
# Asking the user for a new city and updating .env to reflect these changes
def parse_cli_for_changing_city():
    # Checking if any argument was provided at all, otherwise IndexError
    if len(sys.argv) >= 2: 
        if sys.argv[1] == "change" or sys.argv[1] == "채ndra":
            if sys.argv[2] == "city" or sys.argv[2] == "stad":
                value = " "
                ask = "Please input your city without any spaces: "
                while " " in value:
                    value = input(ask)
                    if " " in value:
                        ask = "Try again without spaces: "
                update_credentials("CITY", value)


def parse_cli_for_timetable():
    if len(sys.argv) >= 2: 
        # Ensuring that bus stop isn't a recognized command
        if len(sys.argv) >= 2 and sys.argv[1] not in POSSIBLE_TOP_LEVEL_CLI_ARGUMENTS:
            # call and pass all CLI arguments after the first to the function
            bus_timetable(sys.argv[1:])


def parse_cli_for_route():
    # Checking if any argument was provided at all, otherwise IndexError
    if len(sys.argv) >= 2: 
        if sys.argv[1] == "from" or sys.argv[1] == "fr책n":
            # Checking if any command line argument is "to" and assume that everything after is the <destination>
            for i, element in enumerate(sys.argv):
                if element == "to" or element == "till":
                    # Excluding first and second argument, "linj.py" and "from" respectively since they are not part of the user inputed bus stop name
                    origin = sys.argv[2:i]
                    # Excluding `1 +` "to" from destination since it isn't part of the user inputed bus stop name
                    destination = sys.argv[1 + i:]
                    # + 1 to exclude the word "to" from being included in the slice output
                    bus_route(origin, destination)
                    break


def parse_cli_for_help():
    # If no CLI arguments are provided, then show help page or if user explicitly wants help
    # Check and run if there are not arguments provided at all, 1 because ./linj is the first argument
    # Also run if user provides "help" or "--help"
    if len(sys.argv) == 1 or sys.argv[1] == "help" or sys.argv[1] == "--help":
        print("""
COMMANDS:

  help, --help
    Description: display help

  change key
    Description: change the API key

  채ndra nyckel
    Description: 채ndra API nyckel

  change city
    Description: change city

  채ndra stad
    Description: 채ndra stad

  from <origin> to <destination>
    Description: show route between two stops

  fr책n <origin> till <destination>
    Description: visa rut mellan tv책 h책llplatser

  <bus_stop_name>
    Description: when none of the above are specified, assume timetable. Shows timetable for the ggiven stop

NOTES:
  - City name and API key are stored in a local `.env` file and can be set using the commands above.
        """)


#  __  __       _         _____                 _   _             
# |  \/  | __ _(_)_ __   |  ___|   _ _ __   ___| |_(_) ___  _ __  
# | |\/| |/ _` | | '_ \  | |_ | | | | '_ \ / __| __| |/ _ \| '_ \ 
# | |  | | (_| | | | | | |  _|| |_| | | | | (__| |_| | (_) | | | |
# |_|  |_|\__,_|_|_| |_| |_|   \__,_|_| |_|\___|\__|_|\___/|_| |_|


# Making it clear what is happening even though I'm not using any module files
if __name__ == "__main__":
    parse_cli_for_timetable()
    parse_cli_for_changing_city()
    parse_cli_for_route()
    parse_cli_for_changing_api_key()
    parse_cli_for_help()
